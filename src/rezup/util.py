
import os
import sys
from contextlib import contextmanager
from .container import Container, ContainerError


def locate_rez_lib(container=None, create=False):
    """Return Rez lib location form container if found

    Args:
        container (str, optional): container name, use default container
            if name not given.
        create (bool, optional): create local revision if not exists,
            default False.

    Returns:
        (pathlib.Path): rez lib location if found

    Raises:
        ContainerError: when no valid revision to use

    """
    revision = _get_revision(container, create=create)
    return revision.locate_rez_lib()


def resolve_environ(package_requests, container=None, create=False, **kwargs):
    """Resolve package requests with Rez imported from container

    This will try to locate Rez lib from container, insert into sys.path,
    and import rez to do the resolve.

    Args:
        package_requests: List of strings or PackageRequest objects
            representing the request.
        container (str, optional): container name, use default container
            if name not given.
        create (bool, optional): create local revision if not exists,
            default False.
        **kwargs: will pass into rez ResolvedContext

    Returns:
        dict: The environment dict generated by the resolved context.

    Raises:
        ContainerError: when no valid revision to use.
        Rez Exceptions: If context failed to resolve.

    """
    revision = _get_revision(container, create=create)
    lib = revision.locate_rez_lib()
    env = revision.recipe_env()

    with _temporary_context(environ=env):
        sys.path.insert(0, str(lib))
        from rez.resolved_context import ResolvedContext

        context = ResolvedContext(package_requests, **kwargs)
        return context.get_environ()


def _get_revision(container=None, create=False):
    name = container or Container.DEFAULT_NAME
    container = Container(name)

    revision = container.get_latest_revision()

    if revision is None:
        if container.is_remote():
            raise ContainerError("No valid revision in container %r: %s"
                                 % (container.name(), container.path()))
        elif create:
            revision = container.new_revision()

    revision = revision.pull(check_out=create)
    if revision is None:
        raise ContainerError("No matched revision in local container.")

    return revision


@contextmanager
def _temporary_context(environ):
    _os_environ = os.environ.copy()
    try:
        os.environ.update(environ)
        yield
    finally:
        os.environ.clear()
        os.environ.update(_os_environ)
